// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type GQConflict struct {
	ID               string `json:"id"`
	RunwayID         string `json:"runwayID"`
	ResolutionMethod string `json:"resolutionMethod"`
	Remote           string `json:"remote"`
	Local            string `json:"local"`
}

type GQConflictTuple struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type GQRunway struct {
	ID            string     `json:"id"`
	Designator    string     `json:"designator"`
	Contamination []*GQTuple `json:"contamination"`
	Coverage      []*GQTuple `json:"coverage"`
	Depth         []*GQTuple `json:"depth"`
	LooseSand     *bool      `json:"looseSand"`
	LatestVersion *int       `json:"latestVersion"`
}

type GQRunwayInput struct {
	ID            string          `json:"id"`
	Designator    string          `json:"designator"`
	Contamination []*GQTupleInput `json:"contamination"`
	Coverage      []*GQTupleInput `json:"coverage"`
	Depth         []*GQTupleInput `json:"depth"`
	LooseSand     *bool           `json:"looseSand"`
	LatestVersion *int            `json:"latestVersion"`
}

type GQTuple struct {
	Key   string `json:"key"`
	Value int    `json:"value"`
}

type GQTupleInput struct {
	Key   string `json:"key"`
	Value int    `json:"value"`
}

type NewRunway struct {
	Designator string `json:"designator"`
}

type Strategy string

const (
	StrategyApplyLocal  Strategy = "APPLY_LOCAL"
	StrategyApplyRemote Strategy = "APPLY_REMOTE"
)

var AllStrategy = []Strategy{
	StrategyApplyLocal,
	StrategyApplyRemote,
}

func (e Strategy) IsValid() bool {
	switch e {
	case StrategyApplyLocal, StrategyApplyRemote:
		return true
	}
	return false
}

func (e Strategy) String() string {
	return string(e)
}

func (e *Strategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Strategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Strategy", str)
	}
	return nil
}

func (e Strategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
